diff --git a/node_modules/starknet/dist/provider/default.js b/node_modules/starknet/dist/provider/default.js
index 0009eb2..130540a 100644
--- a/node_modules/starknet/dist/provider/default.js
+++ b/node_modules/starknet/dist/provider/default.js
@@ -77,6 +77,11 @@ var stark_1 = require("../utils/stark");
 var errors_1 = require("./errors");
 var interface_1 = require("./interface");
 var utils_1 = require("./utils");
+/* -----------------------------  Walletme--------------------------------------------- */
+var jsonbig =  require('json-bigint')({ parseAlwaysAsBig: true, useNativeBigInt: false })
+var RNPlatform = require('react-native').Platform;
+/* ----------------------------------------------------------------------------- */
+
 function wait(delay) {
     return new Promise(function (res) {
         setTimeout(res, delay);
@@ -220,12 +225,22 @@ var Provider = /** @class */ (function () {
                             throw new errors_1.GatewayError(responseBody.message, errorCode); // Caught locally, and re-thrown for the user
                         }
                         if (endpoint === 'estimate_fee') {
-                            return [2 /*return*/, (0, json_1.parseAlwaysAsBig)(textResponse, function (_, v) {
-                                    if (v && typeof v === 'bigint') {
+                            if(RNPlatform.OS === 'android') {
+                                 return [2 /*return*/, jsonbig.parse(textResponse, (_, v) => {
+                                    if(v && typeof v === 'number') {
+                                        return (0, number_1.toBN)(v);
+                                    }
+                                    return v;
+                                })];
+                            }
+
+                             return [2 /*return*/, (0, json_1.parseAlwaysAsBig)(textResponse, function (_, v) {
+                                    if (v && (typeof v === 'bigint')) {
                                         return (0, number_1.toBN)(v.toString());
                                     }
                                     return v;
                                 })];
+                                
                         }
                         return [2 /*return*/, (0, json_1.parse)(textResponse)];
                     case 4:
diff --git a/node_modules/starknet/dist/utils/hash.js b/node_modules/starknet/dist/utils/hash.js
index 38d0a36..dff7afc 100644
--- a/node_modules/starknet/dist/utils/hash.js
+++ b/node_modules/starknet/dist/utils/hash.js
@@ -30,6 +30,10 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.calculateContractAddressFromHash = exports.calculcateTransactionHash = exports.calculateDeployTransactionHash = exports.calculateTransactionHashCommon = exports.computeHashOnElements = exports.pedersen = exports.getSelectorFromName = exports.starknetKeccak = exports.feeTransactionVersion = exports.transactionVersion = void 0;
 var keccak_1 = require("ethereum-cryptography/keccak");
+// Walletme fix
+var RNPlatform = require("react-native").Platform;
+var walletme_keccak256 = require('js-sha3').keccak256;
+
 var minimalistic_assert_1 = __importDefault(require("minimalistic-assert"));
 var constants_1 = require("../constants");
 var ellipticCurve_1 = require("./ellipticCurve");
@@ -38,6 +42,9 @@ var number_1 = require("./number");
 exports.transactionVersion = 0;
 exports.feeTransactionVersion = (0, number_1.toBN)(2).pow((0, number_1.toBN)(128)).add((0, number_1.toBN)(exports.transactionVersion));
 function keccakHex(value) {
+    if(RNPlatform.OS === 'android') {
+        return (0, encode_1.addHexPrefix)((0, walletme_keccak256)((0, encode_1.utf8ToArray)(value)));
+    }
     return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, encode_1.utf8ToArray)(value))));
 }
 /**
